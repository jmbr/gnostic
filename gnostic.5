.\" Process this file with:
.\" groff -man -Tascii gnostic.5
.\"
.TH GNOSTIC 5 "AUGUST 2004" "Gnostic Distribution" Gnostic

.SH NAME
gnostic \- task file writer's guide

.SH SYNOPSIS
For a quickstart see
.BR gnostic (1)

.SH DESCRIPTION
Task files are a very flexible way of specifying how (and when) a given task
should be executed. They are composed by comments, variable declarations and
task definitions.

Comments can be located anywhere in the task file and must be preceded by a `#'
character at the beginning of the line.

Variable declarations will become part of the environment of every task and are
of the form NAME=VALUE. Everything written in the line will be part of the
declaration so beware of trailing whitespaces, etc. (This syntax may change in
future versions of the program to be more similar to shell variable
declarations).

Task definitions begin with the task name followed by a colon and optionally a
dependency expression in the same line. Following this, there must be at least
one action.

Task names can begin with either an uppercase or lowercase letter or an
underscore and be followed by any alphanumeric character, underscore or dash.
For example: `a', `_A-10', and `xyz23-' are all valid task names.

Dependency expressions can be composed of the boolean operators
.B
and, or, not
and be nested to arbitrary levels using parentheses.

An action is a sequence of shell commands, all of which must be indented with a
.I
TAB
on each line. There should be at least one line of actions.

It is also possible to include the contents of other task files from the current one by using the
.B
include
directive and specifying a path to the requested file.

The main task is the one invoked by the user and the current task is the one
being executed at a given moment. During task execution the environment
variables
.B
GNOSTIC_MAIN
and
.B
GNOSTIC_CURRENT
will be set to the name of the main and the current task respectively.

.SH EXAMPLES

.IP "a: (b and c) or not d"
echo "a: Done."

.PP
This example declares the task `a' and specifies that it depends in a certain
way on the results of tasks `b', `c' and `d' which must be defined in the same
task file. During execution, if the dependencies are satisfied, the
.B
echo
command will be executed by
.I
/bin/sh

.SH AUTHOR
Juan M. Bello Rivas <jmbr@superadditive.com>

.SH SEE ALSO
.BR gnostic (1)
